#!/bin/python3
# -*- coding: utf-8 -*-
import curses
import time
import subprocess
import re
import locale
from collections import Counter
from copy import deepcopy
import random

def get_node_number():
    command = 'scontrol show node | grep "NodeName"'
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()

    if process.returncode == 0:
        data = stdout.decode().splitlines()
        node_number = len(data)
        nodename_list = [re.search(r'NodeName=(\S+)', line).group(1) for line in data]
        nodename_list = [name[4:] if 'node' in name else name[0] for name in nodename_list]
        return node_number, nodename_list
    else:
        return 0, []


def print_time(stdscr):
    # 获取当前时间
    current_time = time.strftime("%Y-%m-%d %H:%M:%S")
    # 在第一行显示当前时间，使用黑字白底
    stdscr.addstr(0, 0, current_time, curses.color_pair(1))


def get_savai():
    command = "scontrol show node | grep -E 'NodeName|State|CfgTRES|AllocTRES'"

    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()

    if process.returncode == 0:
        data = stdout.decode('utf-8')
        lines = data.strip().split('\n')
        result = []
        node_pattern = re.compile(r'NodeName=(\w+)')
        state_pattern = re.compile(r'   State=([\w\+]+)')
        cfg_pattern = re.compile(r'   CfgTRES=cpu=(\d+),mem=(\d+?\.?\d+)([MG]),billing=\d+,gres/gpu=(\d+)')
        alloc_pattern = re.compile(r'   AllocTRES=cpu=(\d+),mem=(\d+?\.?\d+)([MG]),gres/gpu=(\d+)')

        for line in lines:
            if 'CfgTRES' in line:
                match = cfg_pattern.match(line)
                if match:
                    cpu, mem, mem_unit, gpu = match.groups()
                    result[-1]['cfg']['cpu'] = int(cpu)
                    mem_value = int(float(mem)) if mem_unit == 'G' else int(float(mem)/102.4)//10
                    mem_value -= 10
                    result[-1]['cfg']['mem'] = mem_value
                    result[-1]['cfg']['gpu'] = int(gpu)
                else:
                    cfg_cpu_pattern = re.compile(r'   CfgTRES=cpu=(\d+),mem=(\d+?\.?\d+)([MG]),billing=\d+')
                    match = cfg_cpu_pattern.match(line)
                    if match:
                        cpu, mem, mem_unit = match.groups()
                        result[-1]['cfg']['cpu'] = int(cpu)
                        mem_value = int(float(mem)) if mem_unit == 'G' else int(float(mem)/102.4)//10
                        result[-1]['cfg']['mem'] = mem_value
            elif 'AllocTRES' in line:
                match = alloc_pattern.match(line)
                if match:
                    cpu, mem, mem_unit, gpu = match.groups()
                    result[-1]['alloc']['cpu'] = int(cpu)
                    mem_value = int(float(mem)) if mem_unit == 'G' else int(float(mem)/102.4)//10
                    result[-1]['alloc']['mem'] = mem_value
                    result[-1]['alloc']['gpu'] = int(gpu)
                else:
                    alloc_cpu_pattern = re.compile(r'   AllocTRES=cpu=(\d+),mem=(\d+?\.?\d+)([MG])')
                    match = alloc_cpu_pattern.match(line)
                    if match:
                        cpu, mem, mem_unit = match.groups()
                        result[-1]['alloc']['cpu'] = int(cpu)
                        mem_value = int(float(mem)) if mem_unit == 'G' else int(float(mem)/102.4)//10
                        result[-1]['alloc']['mem'] = mem_value
            elif 'NodeName' in line:
                match = node_pattern.match(line)
                if match:
                    nodename = match.group(1)
                    result.append({'nodename':nodename,'state':'UNKNOWN','alloc':{'cpu':0,'mem':0,'gpu':0},'cfg':{'cpu':0,'mem':0,'gpu':0}})
            elif 'State' in line:
                match = state_pattern.match(line)
                if match:
                    state = match.group(1)
                    result[-1]['state'] = state
        return result
    else:
        return stderr.decode('utf-8')


def print_node_name(stdscr, nodename_list):
    height, width = stdscr.getmaxyx()
    for i in range(1, len(nodename_list)+1):
        if i < height:
            stdscr.addstr(i, 0, nodename_list[i-1], curses.color_pair(6))


def print_node_resource_err(stdscr, result, start_y=3):
    stdscr.addstr(1, start_y, str(result), curses.color_pair(2))


def get_alloc_color(alloc, all):
    if alloc < all*0.5:
        color = 4 #绿色
    elif alloc > all * 0.9:
        color = 7 # 品红
    else:
        color = 5 # 黄色
    return color


def get_alloc_logo(alloc, all):
    if alloc == 0:
        logo = "▢"
    elif alloc <= all * 0.125:
        logo = '▁'
    elif alloc <= all * 0.25:
        logo = '▂'
    elif alloc <= all * 0.333:
        logo = '▃'
    elif alloc <= all * 0.5:
        logo = '▄'
    elif alloc <= all * 0.625:
        logo = '▅'
    elif alloc <= all * 0.75:
        logo = '▆'
    elif alloc <= all * 0.875:
        logo = '▇'
    else:
        logo = '█'
    return logo


def get_partition_order(x):
    partition_order = {"cpu":0, "A100":1, "RTX3090":2, "RTX4090":3, "ADA6000":4, "L40S":5}
    return partition_order.get(x, 99)


def get_nodelist_order(x):
    if x.startswith("("): return "zzzzzzzzzzz"+x
    else: return x


def get_second(slurm_time):
    slurm_time = slurm_time.split('-')  # 分离天数和时间部分
    if len(slurm_time)>1: days, time_part = slurm_time[0], slurm_time[1]
    else: days, time_part = 0, slurm_time[0]
    time_part = time_part.split(':')
    if len(time_part) == 3: hours, minutes, seconds = map(int, time_part)  # 分解时、分、秒
    elif len(time_part) == 2: hours, minutes, seconds = 0, int(time_part[0]), int(time_part[1])
    elif len(time_part) == 1: hours, minutes, seconds = 0, 0, int(time_part[0])
    # 计算总秒数
    total_seconds = int(days) * 24 * 3600 + hours * 3600 + minutes * 60 + seconds
    return total_seconds


def get_squeue_sort_func(key):
    sort_dict = {"j":8, "a":40, "e":9, "u":19, "s":18, "t":37, "l":11, "c":27, "m":12, "g":1, "q":16, "p":41, "n":42}
    idx = sort_dict.get(key.lower()[-1], 8)
    if key in 'tl':
        # 处理时间格式
        return lambda x:get_second(x[idx])
    elif key in 'cmgp':
        # 处理数字格式
        return lambda x:int(x[idx])
    elif key == 'a':
        # 处理队列
        return lambda x:get_partition_order(x[idx])
    elif key == 'n':
        # 处理nodelist(reason)
        return lambda x:get_nodelist_order(x[idx])
    elif key == 'j':
        # 处理jobid
        return lambda x:int(x[idx])
    else:
        return lambda x:x[idx]


def print_node_resource_cpu(stdscr, result, start_y, full=False):
    height, width = stdscr.getmaxyx()
    if start_y >= width:
        return start_y+1
    # length: 7/26
    start_x = 1
    full = full and width > 2*(start_y+20+1)
    if full:
        # 位置充足时，输出[|||20|||]xxx/xxx
        for idx in range(len(result)):
            if start_x + idx >= height:
                break
            alloc_cpu = result[idx]['alloc']['cpu']
            all_cpu = result[idx]['cfg']['cpu']
            color = get_alloc_color(alloc_cpu, all_cpu)
            count = int(1.0*alloc_cpu/all_cpu*20)
            if alloc_cpu > 0 and count == 0: count = 1
            if alloc_cpu < all_cpu and count == 20: count = 19
            stdscr.addstr(start_x + idx, start_y, '[', curses.color_pair(1))
            stdscr.addstr(start_x + idx, start_y+1, "|"*count, curses.color_pair(color))
            cpu_ratio = int(100.0*alloc_cpu/all_cpu)
            if alloc_cpu > 0 and cpu_ratio == 0: cpu_ratio = "<1"
            if alloc_cpu < all_cpu and cpu_ratio == 100: cpu_ratio = 99
            stdscr.addstr(start_x + idx, start_y+21, '{:>3.3}%'.format(str(cpu_ratio)), curses.color_pair(1))
            stdscr.addstr(start_x + idx, start_y+21+4, ']', curses.color_pair(1))
    else:
        # 位置不足时，只输出xxx/xxx
        for idx in range(len(result)):
            if start_x + idx >= height:
                break
            alloc_cpu = result[idx]['alloc']['cpu']
            all_cpu = result[idx]['cfg']['cpu']
            color = get_alloc_color(alloc_cpu, all_cpu)
            stdscr.addstr(start_x + idx, start_y, "{:>3}/".format(str(alloc_cpu)), curses.color_pair(color))
            stdscr.addstr(start_x + idx, start_y+4, "{:<3}".format(str(all_cpu)), curses.color_pair(1))
    
    return start_y+26+1 if full else start_y+7+1


def print_node_resource_gpu(stdscr, result, start_y, full=False):
    height, width = stdscr.getmaxyx()
    # length: 3/10
    # " □ ■"
    start_x = 1
    full = full and width > 1.5*(start_y+10+1)
    if full:
        # 位置充足时，输出[■■■■□□□□]
        for idx in range(len(result)):
            if start_x + idx >= height:
                break
            alloc_gpu = result[idx]['alloc']['gpu']
            all_gpu = result[idx]['cfg']['gpu']
            color = get_alloc_color(alloc_gpu, all_gpu)
            if all_gpu == 0:
                continue
            # stdscr.addstr(start_x + idx, start_y, "[", curses.color_pair(1))
            # stdscr.addstr(start_x + idx, start_y+1, "■"*alloc_gpu+"□"*(all_gpu-alloc_gpu), curses.color_pair(1))
            # stdscr.addstr(start_x + idx, start_y+1+9, str(alloc_gpu), curses.color_pair(color))
            # stdscr.addstr(start_x + idx, start_y+1+9+1, "/{}]".format(str(all_gpu)), curses.color_pair(1))
            stdscr.addstr(start_x + idx, start_y, "[", curses.color_pair(1))
            stdscr.addstr(start_x + idx, start_y+1, "■"*alloc_gpu+"□"*(all_gpu-alloc_gpu), curses.color_pair(color))
            stdscr.addstr(start_x + idx, start_y+1+all_gpu, ']', curses.color_pair(1))
            
    else:
        # 位置不足时，输出x/x
        for idx in range(len(result)):
            if start_x + idx >= height:
                break
            alloc_gpu = result[idx]['alloc']['gpu']
            all_gpu = result[idx]['cfg']['gpu']
            color = get_alloc_color(alloc_gpu, all_gpu)
            if all_gpu == 0:
                all_gpu = '-'
                alloc_gpu = '-'
                color = 1
            stdscr.addstr(start_x + idx, start_y, str(alloc_gpu), curses.color_pair(color))
            stdscr.addstr(start_x + idx, start_y+1, "/{}".format(str(all_gpu)), curses.color_pair(1))
    
    return start_y+10+1 if full else start_y+3+1


def print_node_resource_mem(stdscr, result, start_y, full=False):
    height, width = stdscr.getmaxyx()
    if start_y >= width:
        return start_y+1
    # length: 4/26
    start_x = 1
    full = full and width > 2*(start_y+26+1)
    if full:
        # 位置充足时，输出[||||10|||| xxx/xxxG]
        for idx in range(len(result)):
            if start_x + idx >= height:
                break
            alloc_mem = result[idx]['alloc']['mem']
            all_mem = result[idx]['cfg']['mem']
            color = get_alloc_color(alloc_mem, all_mem)
            count = int(1.0*alloc_mem/all_mem*16)
            if alloc_mem > 0 and count == 0: count = 1
            stdscr.addstr(start_x + idx, start_y, '[', curses.color_pair(1))
            stdscr.addstr(start_x + idx, start_y+1, "|"*count, curses.color_pair(color))
            stdscr.addstr(start_x + idx, start_y+1+16, "{:>3}/{}G]".format(str(alloc_mem), str(all_mem)), curses.color_pair(1))
            
    else:
        # 位置不足时，输出xxx%
        for idx in range(len(result)):
            if start_x + idx >= height:
                break
            alloc_mem = result[idx]['alloc']['mem']
            all_mem = result[idx]['cfg']['mem']
            mem_ratio = int(100.0*alloc_mem/all_mem)
            if alloc_mem > 0 and mem_ratio == 0: mem_ratio = "<1"
            if alloc_mem < all_mem and mem_ratio == 100: mem_ratio = ">99"
            stdscr.addstr(start_x + idx, start_y, '{:>3.3}%'.format(str(mem_ratio)), curses.color_pair(1))

    return start_y+26+1 if full else start_y+4+1


def print_all_job_states(stdscr, start_y):
    height, width = stdscr.getmaxyx()
    # 17
    # 获取所有状态的任务
    command = "squeue --state=BF,CA,CD,CF,CG,DL,F,NF,OOM,PD,PR,R,RD,RF,RH,RQ,RS,RV,SI,SE,SO,ST,S,TO --sort=t|awk '{print $5}'"
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    if process.returncode == 0:
        data = stdout.decode('utf-8')
        lines = data.strip().split('\n')
        job_state = lines[1:]
        job_state = dict(Counter(job_state))
        # 打印各种状态的任务数量
        states = ['R',"PD","CD","CA","F"]
        colors = [4,  5,   6,   7,   2]
        for i in range(len(states)):
            stdscr.addstr(0, start_y, states[i]+' ', curses.color_pair(colors[i]))
            stdscr.addstr(0, start_y+1+len(states[i]), str(job_state.get(states[i], 0)), curses.color_pair(1))
            start_y += 4+len(states[i])
        count = sum([job_state.get(state, 0) for state in states])
        stdscr.addstr(0, start_y, "S/T {}/{}".format(str(count), str(len(lines[1:]))), curses.color_pair(1))
    else:
        stdscr.addstr(0, start_y, stderr.decode('utf-8'), curses.color_pair(2))


def print_running_job_on_each_node(stdscr, result, start_y):
    height, width = stdscr.getmaxyx()
    start_x = 1
    nodelist = [res['nodename'] for res in result]
    multi_node_job_color_map = {}
    multi_node_job_counter = 0
    multi_node_job_color_list = (3, 6, 7)
    for idx, node in enumerate(nodelist):
        command = "squeue --sort=i --Format=JobID,PriorityLong,NodeList --nodelist={}".format(node)
        process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = process.communicate()
        if process.returncode == 0:
            data = stdout.decode('utf-8')
            lines = data.strip().split('\n')
            # 输出节点状态，当节点正常(MIXED, ALLOCATED)时不输出，当节点为IDLE时输出IDLE。
            start_y_origin = start_y
            state = result[idx]['state']
            if 'DOWN' in state or 'FAIL' in state:
                color = 13 # 白字红底
            elif 'RESUME' in state or 'UNDRAIN' in state or 'COMPLETING' in state:
                color = 10 # 黑字白底
            elif 'DRAIN' in state or 'NOT_RESPONDING' in state:
                color = 2 # 红字黑底
            elif 'FUTURE' in state or 'CANCEL_REBOOT' in state:
                color = 5 # 黄字黑底
            elif 'IDLE' in state:
                color = 4 # 绿字黑底
            elif 'ALLOCATED' in state or 'MIXED' in state:
                color = 7 # 品红黑底
            else:
                color = 1 # 白字黑底
            
            if color != 7:
                stdscr.addstr(start_x + idx, start_y, "*{}*".format(state), curses.color_pair(color))
                start_y += len(state)+3
            if len(lines) > 1:
                extra_y = 0
                for i, line in enumerate(lines[1:]):
                    line = line.split()
                    priority = int(line[1])
                    if priority <= 1000:
                        color = 1 # 白字黑底
                    elif priority <= 1500:
                        color = 5 # 黄字黑底
                    elif priority <= 2000:
                        color = 8 # 白字绿底
                    else:
                        color = 11 # 白字青底
                    if '[' in line[2]:
                        job_ids = int(line[0])
                        if job_ids not in multi_node_job_color_map:
                            multi_node_job_color_map[job_ids] = multi_node_job_color_list[multi_node_job_counter]
                            multi_node_job_counter = (multi_node_job_counter + 1) % len(multi_node_job_color_list)
                        color = multi_node_job_color_map[job_ids]

                    stdscr.addstr(start_x + idx, start_y + extra_y, line[0], curses.color_pair(color))
                    extra_y += len(line[0]) + 1
                    if start_y + extra_y >= width:
                        break
            start_y = start_y_origin
        else:
            stdscr.addstr(start_x + idx, start_y, stderr.decode('utf-8'), curses.color_pair(2))


def print_job_data(stdscr, old_data, start_x, sort='j', max_line=999, change_sort_flag=True):
    global DEBUG_MODE

    height, width = stdscr.getmaxyx()
    clear_flag = False
    command = "squeue --format='%all' --state=BF,CA,CD,CF,CG,DL,F,NF,OOM,PD,PR,R,RD,RF,RH,RQ,RS,RV,SI,SE,SO,ST,S,TO"
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    if process.returncode == 0:
        data = stdout.decode('utf-8')
        lines = data.strip().split('\n')
        lines = [str(line) for line in lines]
        data = [line.split('|') for line in lines][1:]
        
        # 0-4   ACCOUNT       TRES_PER_NODE MIN_CPUS         MIN_TMP_DISK     END_TIME
        # 5-9   FEATURES      GROUP         OVER_SUBSCRIBE   JOBID            NAME
        # 10-14 COMMENT       TIME_LIMIT    MIN_MEMORY       REQ_NODES        COMMAND
        # 15-19 PRIORITY      QOS           REASON           ST               USER
        # 20-24 RESERVATION   WCKEY         EXC_NODES        NICE             S:C:T
        # 25-29 JOBID         EXEC_HOST     CPUS             NODES            DEPENDENCY
        # 30-34 ARRAY_JOB_ID  GROUP         SOCKETS_PER_NODE CORES_PER_SOCKET THREADS_PER_CORE
        # 35-39 ARRAY_TASK_ID TIME_LEFT     TIME             NODELIST         CONTIGUOUS
        # 40-44 PARTITION     PRIORITY      NODELIST(REASON) START_TIME       STATE
        # 45-49 UID           SUBMIT_TIME   LICENSES         CORE_SPEC        SCHEDNODES
        # 50    WORK_DIR
        
        # JOBID PARTITION NAME USER ST TIME TIME-LIMIT CPU MEM GPU QOS PRIORITY NODELIST(REASON)
        # 8     40        9    19   18 37   11         27  12  1   16  41       42
        title_list = ['JOBID', "PARTITION", "NAME", "USER", "ST", 
                      "TIME", "TIME-LIMIT", "CPU", "MEM", "GPU", 
                      "QOS", "PRIOR", "NODELIST(REASON)"]
        show_list = [8,40,9,19,18,37,11,27,12,1,16,41,42]
        # 处理MEM和GPU
        command = "squeue --Format=jobid,tres-alloc:50 --state=BF,CA,CD,CF,CG,DL,F,NF,OOM,PD,PR,R,RD,RF,RH,RQ,RS,RV,SI,SE,SO,ST,S,TO"
        process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = process.communicate()
        if process.returncode == 0:
            lines = stdout.decode('utf-8').strip().split('\n')[1:]
            tres_alloc = {}
            for line in lines:
                line = line.split()
                if len(line) == 2:
                    tres_mem = line[1].split(',')[1]
                    if tres_mem.endswith('G'): tres_mem = tres_mem[4:-1]
                    elif tres_mem.endswith('M'): tres_mem = str(int(tres_mem[4:-1])//1024)
                    tres_alloc[line[0]] = tres_mem
            for idx in range(len(data)):
                data[idx][12] = tres_alloc.get(data[idx][25], "42")
                gpus = data[idx][1]
                if gpus == 'N/A':
                    data[idx][1] = '0'
                else:
                    data[idx][1] = gpus.split(':')[-1]
        else:
            for idx in range(len(data)):
                if data[idx][12].endswith('G'): data[idx][12] = data[idx][12][:-1]
                elif data[idx][12].endswith('M'): data[idx][12] = str(int(data[idx][12][:-1])//1024)
                gpus = data[idx][1]
                data[idx][1] = gpus.split(':')[-1]
        # 对于多卡任务，cpu/mem/gpu需要乘上节点数
        for idx in range(len(data)):
            if int(data[idx][28]) > 1:
                nnodes = int(data[idx][28])
                data[idx][28] = str(int(data[idx][27]) * nnodes)
                data[idx][12] = str(int(float(data[idx][12]) * nnodes))
                data[idx][1] = str(int(data[idx][1]) * nnodes)
        # 排序
        data.sort(key=get_squeue_sort_func(sort.lower()[-1]), reverse=sort.startswith('-'))
        data = data[:max_line]

        if len(data) == 0:
            return None

        # 统计每个条目的最大长度
        align_length = [max([len(data[i][j]) for i in range(len(data))]) for j in show_list]
        # 不少于数据标题长度
        align_length = [max(align_length[i], len(title_list[i])) for i in range(len(show_list))]
        # # 手动调整某些项目的长度
        # # CPU, MEM, GPU
        # align_length[7] = 3
        # align_length[8] = 3
        # align_length[9] = 3
        # # TIME, TIME-LIMIT
        # align_length[5] = 11
        # align_length[6] = 11

        # 设置对齐格式
        formation = ("{{:>{}}} "*(len(align_length)-1) + "{{:<{}}}").format(*align_length)

        # 判断每行内容是否有所更改
        output_flags = [True] * len(data)
        if old_data is None:
            change_sort_flag = True
        else:
            old_align_length, old_data = old_data
            if len(old_data) != len(data):
                clear_flag = True
            elif sum([old_align_length[i] != align_length[i] for i in range(len(align_length))]):
                change_sort_flag = True
            elif len(data)>20:
                for idx in range(min(len(data), len(old_data))):
                    output = [data[idx][i] for i in show_list]
                    if old_data[idx] == formation.format(*output)[:width-1]:
                        output_flags[idx] = False
        # 清除旧数据
        if clear_flag:
            stdscr.erase()
        if change_sort_flag:
            stdscr.clear() 
            old_data = None
            output_flags = [True] * len(data)
        # 打印内容
        print_data = []
        for idx, line in enumerate(data):
            output = [line[i] for i in show_list]
            print_data.append(formation.format(*output)[:width-1])
            if output_flags[idx]:
                stdscr.addstr(start_x+idx+1, 0, formation.format(*output)[:width-1], curses.color_pair(1 if not DEBUG_MODE else random.randint(1,7)))

        if clear_flag or change_sort_flag:
            # 打印标题
            stdscr.addstr(start_x, 0, formation.format(*title_list), curses.color_pair(9))
            # 整理排序快捷键
            sort_key = [("J",0),("A",1),("E",3),("U",0),("S",0),
                        ("T",0),("L",5),("C",0),("M",0),("G",0),
                        ("Q",0),("P",0),("N",0)]
            y = 0
            for idx, (char, i) in enumerate(sort_key[:-1]):
                y += align_length[idx] - len(title_list[idx]) + i
                if y >= width:
                    break
                stdscr.addstr(start_x, y, char, curses.color_pair(9)|curses.A_UNDERLINE)
                y += len(title_list[idx]) - i
                y += 1
            else:
                char, i = sort_key[-1]
                if y+i < width:
                    stdscr.addstr(start_x, y+i, char, curses.color_pair(9)|curses.A_UNDERLINE)
            # 突出当前排序
            for idx, char in enumerate(sort_key[:-1]):
                char = char[0].lower()
                if char == sort.lower()[-1]:
                    stdscr.addstr(start_x, sum(align_length[:idx+1])+idx-len(title_list[idx]), title_list[idx], curses.color_pair(12))
                    stdscr.addstr(start_x, sum(align_length[:idx+1])+idx-len(title_list[idx])+sort_key[idx][1], sort_key[idx][0], curses.color_pair(12)|curses.A_UNDERLINE)
                    break
            else:
                # 如果没有break，会到这里
                stdscr.addstr(start_x, sum(align_length[:-1])+idx+1, title_list[-1], curses.color_pair(12))
                stdscr.addstr(start_x, sum(align_length[:-1])+idx+1+sort_key[-1][1], sort_key[-1][0], curses.color_pair(12)|curses.A_UNDERLINE)
        return align_length, print_data

    else:
        stdscr.addstr(start_x+1, 0, stderr.decode('utf-8'), curses.color_pair(2))
        return None


def print_keyborad_info(stdscr, start_x):
    height, width = stdscr.getmaxyx()
    stdscr.addstr(start_x, 0, "F10", curses.color_pair(1))
    stdscr.addstr(start_x, 3, "Quit", curses.color_pair(10))
    stdscr.addstr(start_x, 7, "F12", curses.color_pair(1))
    stdscr.addstr(start_x, 10, "Debug", curses.color_pair(10))


def print_version_info(stdscr, start_x):
    height, width = stdscr.getmaxyx()
    version = "By Lucky, v2.1"
    stdscr.addstr(start_x, width-1-len(version), version, curses.color_pair(1))


def gridview(stdscr):
    global DEBUG_MODE

    NODES, nodename_list = get_node_number()
    DEBUG_MODE = False
    # 取消屏幕回显
    curses.noecho()
    # 开启非阻塞输入
    stdscr.nodelay(1)
    # 隐藏光标
    curses.curs_set(0)

    # 设置颜色对比
    curses.start_color()
    curses.init_pair(1, curses.COLOR_WHITE, curses.COLOR_BLACK)  # 白字黑底
    curses.init_pair(2, curses.COLOR_RED, curses.COLOR_BLACK)    # 红字黑底
    curses.init_pair(3, curses.COLOR_BLUE, curses.COLOR_BLACK)   # 蓝字黑底
    curses.init_pair(4, curses.COLOR_GREEN, curses.COLOR_BLACK)  # 绿字黑底
    curses.init_pair(5, curses.COLOR_YELLOW, curses.COLOR_BLACK) # 黄字黑底
    curses.init_pair(6, curses.COLOR_CYAN, curses.COLOR_BLACK)   # 青字黑底
    curses.init_pair(7, curses.COLOR_MAGENTA, curses.COLOR_BLACK)# 品红黑底

    curses.init_pair(8, curses.COLOR_WHITE, curses.COLOR_GREEN)  # 白字绿底
    curses.init_pair(9, curses.COLOR_BLACK, curses.COLOR_CYAN)   # 黑字青底
    curses.init_pair(10, curses.COLOR_BLACK, curses.COLOR_WHITE) # 黑字白底
    curses.init_pair(11, curses.COLOR_WHITE, curses.COLOR_CYAN)  # 白字青底
    curses.init_pair(12, curses.COLOR_BLACK, curses.COLOR_GREEN) # 黑字绿底
    curses.init_pair(13, curses.COLOR_WHITE, curses.COLOR_RED)   # 白字红底

    # 设置整个窗口的背景颜色为白色
    # stdscr.bkgd(' ', curses.color_pair(1))
    job_sort_key = "j"
    last_update_time = 0
    old_data = None
    old_height, old_width = 0, 0
    clear_win1 = False
    clear_win2 = False
    clear_win3 = False
    change_sort_flag = False

    while True:
        # 获取屏幕大小
        height, width = stdscr.getmaxyx()
        if old_height != height or old_width != width:
            old_height = height
            old_width = width
            # 0-NODES: 显示时间和节点信息，NODES+1空，[NODES+2, heigh-2]显示任务信息， height-1显示提示信息
            stdscr.clear()
            win1 = curses.newwin(NODES+1, width, 0, 0)
            win2 = curses.newwin(height-NODES-3, width, NODES+2, 0)
            win2.immedok(True)
            win3 = curses.newwin(1, width, height-1, 0)
            stdscr.refresh() # 确保窗口正确初始化
            last_update_time = 0 # 立即更新
            clear_win1 = True
            clear_win2 = True
            clear_win3 = True
        
        if time.time() - last_update_time >= 1:
            # 每过1秒刷新一次
            last_update_time = time.time()

            # win1总是每秒清空一次
            win1.erase()
            # 时间
            print_time(win1)
            # 各节点资源占用情况
            print_node_name(win1, nodename_list)
            result = get_savai()
            if type(result) is not list:
                print_node_resource_err(win1, result, start_y = 3)
            else:
                start_y = 3
                start_y = print_node_resource_cpu(win1, result, start_y, True)
                start_y = print_node_resource_mem(win1, result, start_y, True)
                start_y = print_node_resource_gpu(win1, result, start_y, True)
                print_running_job_on_each_node(win1, result, start_y)
                # 任务状态总览
                print_all_job_states(win1, start_y = 22)
                win1.noutrefresh()

                # win2只在数据迭代时清空
                if clear_win2:
                    clear_win2 = False
                    old_data = None
                # 任务监控指标
                try:
                    old_data = print_job_data(
                        win2, 
                        old_data,
                        start_x=0,
                        sort=job_sort_key, 
                        max_line=height-1-len(result)-3,
                        change_sort_flag=change_sort_flag,
                    )
                except curses.error:
                    clear_win2 = True
                change_sort_flag = False
                # win2.refresh()

            # win3一般不用更新，由用户输入控制
            if clear_win3:
                win3.erase()
                clear_win3 = False
                # 打印键盘快捷键信息
                print_keyborad_info(win3, start_x=0)
                # 打印版本号
                print_version_info(win3, start_x=0)
                win3.noutrefresh()
            
            # 更新屏幕
            curses.doupdate()

        # 检查用户输入，按 'F10' 退出
        try:
            key = stdscr.getch()
            if key == curses.KEY_F10:
                break
            elif key == curses.KEY_F12:
                DEBUG_MODE = not DEBUG_MODE
            elif ord('a')<=key<=ord('z') or ord('A')<=key<=ord('Z'):
                char = chr(key).lower()
                if job_sort_key.lower() == char:
                    job_sort_key = '-'+job_sort_key
                elif char in 'jaeustlcmgqpn':
                    job_sort_key = char
                last_update_time = 0
                change_sort_flag = True
            elif key == curses.KEY_UP:
                last_update_time = 0
        except Exception:
            # 无输入时继续
            pass

        time.sleep(0.1)

height, width = 100, 80
if __name__ == "__main__":
    # 设置区域以支持 UTF-8
    locale.setlocale(locale.LC_ALL, '')
    # 启动
    try:
        curses.wrapper(gridview)
    except KeyboardInterrupt:
        exit(0)
    # except curses.error:
    #     print("Please use a larger terminal to show detailed information")
