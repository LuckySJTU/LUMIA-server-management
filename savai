#!/bin/python3
# -*- coding: utf-8 -*-
import subprocess
import re

class Colors:
    GREEN = '\033[92m'
    CYAN = '\033[96m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    RESET = '\033[0m'

command = "scontrol show node | grep -E 'NodeName|State|CfgTRES|AllocTRES'"

process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
stdout, stderr = process.communicate()

if process.returncode == 0:
    data = stdout.decode('utf-8')

    lines = data.strip().split('\n')

    result = []

    node_pattern = re.compile(r'NodeName=(\w+)')
    state_pattern = re.compile(r'   State=([\w\+]+)')
    cfg_pattern = re.compile(r'   CfgTRES=cpu=(\d+),mem=(\d+?\.?\d+)([MG]),billing=\d+,gres/gpu=(\d+)')
    alloc_pattern = re.compile(r'   AllocTRES=cpu=(\d+),mem=(\d+?\.?\d+)([MG]),gres/gpu=(\d+)')

    for line in lines:
        if 'CfgTRES' in line:
            match = cfg_pattern.match(line)
            if match:
                cpu, mem, mem_unit, gpu = match.groups()
                result[-1]['cfg']['cpu'] = int(cpu)
                mem_value = int(float(mem)) if mem_unit == 'G' else int(float(mem)/102.4)//10
                mem_value -= 10
                result[-1]['cfg']['mem'] = mem_value
                result[-1]['cfg']['gpu'] = int(gpu)
            else:
                cfg_cpu_pattern = re.compile(r'   CfgTRES=cpu=(\d+),mem=(\d+?\.?\d+)([MG]),billing=\d+')
                match = cfg_cpu_pattern.match(line)
                if match:
                    cpu, mem, mem_unit = match.groups()
                    result[-1]['cfg']['cpu'] = int(cpu)
                    mem_value = int(float(mem)) if mem_unit == 'G' else int(float(mem)/102.4)//10
                    mem_value -= 128
                    result[-1]['cfg']['mem'] = mem_value
        elif 'AllocTRES' in line:
            match = alloc_pattern.match(line)
            if match:
                cpu, mem, mem_unit, gpu = match.groups()
                result[-1]['alloc']['cpu'] = int(cpu)
                mem_value = int(float(mem)) if mem_unit == 'G' else int(float(mem)/102.4)//10
                result[-1]['alloc']['mem'] = mem_value
                result[-1]['alloc']['gpu'] = int(gpu)
            else:
                alloc_cpu_pattern = re.compile(r'   AllocTRES=cpu=(\d+),mem=(\d+?\.?\d+)([MG])')
                match = alloc_cpu_pattern.match(line)
                if match:
                    cpu, mem, mem_unit = match.groups()
                    result[-1]['alloc']['cpu'] = int(cpu)
                    mem_value = int(float(mem)) if mem_unit == 'G' else int(float(mem)/102.4)//10
                    result[-1]['alloc']['mem'] = mem_value
        elif 'NodeName' in line:
            match = node_pattern.match(line)
            if match:
                nodename = match.group(1)
                result.append({'nodename':nodename,'state':'UNKNOWN','alloc':{'cpu':0,'mem':0,'gpu':0},'cfg':{'cpu':0,'mem':0,'gpu':0}})
        elif 'State' in line:
            match = state_pattern.match(line)
            if match:
                state = match.group(1)
                result[-1]['state'] = state

    formation = "    {:>8}{:>9}{:>10}{:>5}  {}"
    print(formation.format("NODENAME","CPU","MEM","GPU","STATE"))
    for res in result:
        state = res['state']
        if 'DOWN' in state or 'FAIL' in state:
            state = Colors.RED+"DOWN"+Colors.RESET
        elif 'DRAIN' in state or 'NOT_RESPONDING' in state:
            state = Colors.MAGENTA+"DRAIN"+Colors.RESET
        elif 'RESUME' in state:
            pass
        elif 'IDLE' in state:
            state = Colors.GREEN+state+Colors.RESET
        elif 'ALLOCATED' in state:
            state = Colors.BLUE+state+Colors.RESET
        else:
            if res['cfg']['gpu'] == 0:
                if res['alloc']['cpu'] < res['cfg']['cpu']-2 and res['alloc']['mem'] < res['cfg']['mem']-16:
                    state = Colors.CYAN+'MIXED'+Colors.RESET
                else:
                    state = Colors.BLUE+"ALLOCATED"+Colors.RESET
            else:
                if res['alloc']['gpu'] < res['cfg']['gpu'] and res['alloc']['cpu'] < res['cfg']['cpu']-2 and res['alloc']['mem'] < res['cfg']['mem']-16:
                    state = Colors.CYAN+'MIXED'+Colors.RESET
                else:
                    state = Colors.BLUE+"ALLOCATED"+Colors.RESET
        if res['cfg']['gpu'] == 0:
            res['cfg']['gpu'] = '-'
            res['alloc']['gpu'] = '-'
        print(formation.format(res['nodename'],str(res['alloc']['cpu'])+'/'+str(res['cfg']['cpu']),str(res['alloc']['mem'])+'/'+str(res['cfg']['mem'])+'G',str(res['alloc']['gpu'])+'/'+str(res['cfg']['gpu']),state))

    command = "squeue --state=PD --format=%P"
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    if process.returncode == 0:
        data = stdout.decode('utf-8')
        lines = data.strip().split('\n')
        if len(lines) > 1:
            print("    集群还有{}个任务排队中".format(str(len(lines)-1)), end='')
            a100, rtx3090, rtx4090, ada6000, l40s = 0, 0, 0, 0, 0
            for line in lines[1:]:
                if 'A100' in line:
                    a100 += 1
                if 'RTX3090' in line:
                    rtx3090 += 1
                if 'RTX4090' in line:
                    rtx4090 += 1
                if 'ADA6000' in line:
                    ada6000 += 1
                if 'L40S' in line:
                    l40s += 1
            if a100 > 0:
                print(" A100:{}".format(str(a100)), end='')
            if rtx3090 > 0:
                print(" 3090:{}".format(str(rtx3090)), end='')
            if rtx4090 > 0:
                print(" 4090:{}".format(str(rtx4090)), end='')
            if ada6000 > 0:
                print(" 6000:{}".format(str(ada6000)), end='')
            if l40s > 0:
                print(" L40S:{}".format(str(l40s)), end='')
            print('')
        else:
            print("    努力！努力你就是LUMIA一哥，不努力你就是LUMIA一哥们。")
    else:
        print("    永远相信美好的事情即将发生。")
else:
    print("Runtime Error")
    print(stderr.decode('utf-8'))
